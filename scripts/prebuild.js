const fs = require(`fs`);

const cwd = `${process.cwd()}`;

const autoGeneratedCommentStart = "// START auto-generated PRE-BUILD";
const autoGeneratedCommentEnd = "// END auto-generated PRE-BUILD";

/**
 * 读取指定目录下全部片段并生成索引
 * @param {*} path
 */
const readDirToSnippets = (path) => {
  let paths = fs
    .readdirSync(`${path}`)
    .map((v) => `${path}/${v}`)
    .filter((v) => fs.lstatSync(v).isDirectory());

  let _snippets = [];

  for (let i = 0; i < paths.length; i++) {
    const path = paths[i];

    let subpaths = fs
      .readdirSync(path)
      .map((v) => `${path}/${v}`)
      .filter((v) => !fs.lstatSync(v).isDirectory());

    for (let j = 0; j < subpaths.length; j++) {
      const subpath = subpaths[j];
      if (!subpath.includes(".dart")) continue;

      let snippetName;
      let snippetCode = fs.readFileSync(subpath).toString();

      var regExp = /class Snippet([\s\S]*?) extends State/g;

      while ((results = regExp.exec(snippetCode))) {
        snippetName = results[1];
      }

      _snippets.push({
        path: subpath,
        name: snippetName,
        code: snippetCode,
      });
    }
  }
  return _snippets;
};

let snippets = readDirToSnippets(`${cwd}/lib/snippets`);

const rewriteSnippetExports = () => {
  const findOldAutoGeneratedContent = (text) => {
    const regExp = new RegExp(
      `${autoGeneratedCommentStart}([\\s\\S]*?)${autoGeneratedCommentEnd}`,
      "g"
    );

    let autoGeneratedContent = "";
    while ((results = regExp.exec(text))) {
      autoGeneratedContent = results[0];
    }
    return autoGeneratedContent;
  };

  let path = `${cwd}/lib/snippets/snippets.dart`;
  let dartCodeString = fs.readFileSync(path).toString();

  let oldAutoGeneratedContent = findOldAutoGeneratedContent(dartCodeString);
  let newAutoGeneratedContent = "";

  for (let i = 0; i < snippets.length; i++) {
    const snippet = snippets[i];
    const exportPath = snippet.path.replace(`${cwd}/lib/snippets`, ".");

    if (i === 0) {
      newAutoGeneratedContent += `${autoGeneratedCommentStart}\n`;
    }
    newAutoGeneratedContent += `export '${exportPath}';\n`;
    if (i === snippets.length - 1) {
      newAutoGeneratedContent += `${autoGeneratedCommentEnd}`;
    }
  }

  dartCodeString = dartCodeString.replace(
    oldAutoGeneratedContent,
    newAutoGeneratedContent
  );
  fs.writeFileSync(path, dartCodeString);
};

const rewriteSnippetRoutes = () => {
  const findOldAutoGeneratedContent = (text) => {
    const regExp = new RegExp(
      `${autoGeneratedCommentStart}([\\s\\S]*?)${autoGeneratedCommentEnd}`,
      "g"
    );

    let autoGeneratedContent = "";
    while ((results = regExp.exec(text))) {
      autoGeneratedContent = results[0];
    }
    return autoGeneratedContent;
  };

  let path = `${cwd}/lib/navigators/routes.dart`;
  let dartCodeString = fs.readFileSync(path).toString();

  let oldAutoGeneratedContent = findOldAutoGeneratedContent(dartCodeString);
  let newAutoGeneratedContent = "";

  for (let i = 0; i < snippets.length; i++) {
    const snippet = snippets[i];
    if (i === 0) {
      newAutoGeneratedContent += `${autoGeneratedCommentStart}\n`;
    }
    newAutoGeneratedContent += `  Snippet${snippet.name}(),\n`;
    if (i === snippets.length - 1) {
      newAutoGeneratedContent += `${autoGeneratedCommentEnd}`;
    }
  }

  dartCodeString = dartCodeString.replace(
    oldAutoGeneratedContent,
    newAutoGeneratedContent
  );
  fs.writeFileSync(path, dartCodeString);
};

rewriteSnippetExports();
rewriteSnippetRoutes();
